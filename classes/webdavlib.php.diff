diff --git a/lib/webdavlib.php b/lib/webdavlib.php
index 12441f254a..86eac7fd88 100644
--- a/lib/webdavlib.php
+++ b/lib/webdavlib.php
@@ -15,10 +15,14 @@
 // You should have received a copy of the GNU General Public License
 // along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
+namespace repository_owncloud;
+use core_php_time_limit;
+
 /**
  * webdav_client v0.1.5, a php based webdav client class.
  * class webdav client. a php based nearly RFC 2518 conforming client.
  *
+ *
  * This class implements methods to get access to an webdav server.
  * Most of the methods are returning boolean false on error, an integer status (http response status) on success
  * or an array in case of a multistatus response (207) from the webdav server. Look at the code which keys are used in arrays.
@@ -26,6 +30,8 @@
  * Please notice that all Filenames coming from or going to the webdav server should be UTF-8 encoded (see RFC 2518).
  * This class tries to convert all you filenames into utf-8 when it's needed.
  *
+ * This class was augmented in 2017 to account for OAuth 2-compatible bearer authentication.
+ *
  * @package moodlecore
  * @author Christian Juerges <christian.juerges@xwave.ch>, Xwave GmbH, Josefstr. 92, 8005 Zuerich - Switzerland
  * @copyright (C) 2003/2004, Christian Juerges
@@ -33,7 +39,7 @@
  * @version 0.1.5
  */
 
-class webdav_client {
+class owncloud_client {
 
     /**#@+
      * @access private
@@ -53,7 +59,7 @@ class webdav_client {
     private $_socket_timeout = 5;
     private $_errno;
     private $_errstr;
-    private $_user_agent = 'Moodle WebDav Client';
+    private $_user_agent = 'Moodle WebDav Client for ownCloud';
     private $_crlf = "\r\n";
     private $_req;
     private $_resp_status;
@@ -79,12 +85,24 @@ class webdav_client {
     private $_cnonce = '';
     private $_nc = 0;
 
+    /**
+     * OAuth 2 client; is expected to hold the token for authenticated accesses.
+     * @var \core\oauth2\client
+     */
+    private $oauthclient;
+
+    /**
+     * Prefix to the WebDAV server on host, e.g. /remote.php/webdav/ on most ownCloud installations.
+     * @var string
+     */
+    private $pathprefix;
+
     /**#@-*/
 
     /**
      * Constructor - Initialise class variables
      */
-    function __construct($server = '', $user = '', $pass = '', $auth = false, $socket = '') {
+    public function __construct($server = '', $user = '', $pass = '', $auth = false, $socket = '', $oauthclient = null, $pathprefix = '/') {
         if (!empty($server)) {
             $this->_server = $server;
         }
@@ -94,6 +112,13 @@ class webdav_client {
         }
         $this->_auth = $auth;
         $this->_socket = $socket;
+        // If provided, add OAuth client and path prefix.
+        $this->oauthclient = $oauthclient;
+        // Remove trailing slash, because future uses will come with a leading slash.
+        if (strlen($pathprefix) > 0 && substr($pathprefix, -1) === '/') {
+            $pathprefix = substr($pathprefix, 0, -1);
+        }
+        $this->pathprefix = $pathprefix;
     }
     public function __set($key, $value) {
         $property = '_' . $key;
@@ -399,7 +424,8 @@ class webdav_client {
      * @return bool true on success. false on error.
      */
     function get_file($srcpath, $localpath) {
-
+        // Prepend with WebDAV root.
+        $srcpath = $this->pathprefix . $srcpath;
         $localpath = $this->utf_decode_path($localpath);
 
         $handle = fopen($localpath, 'wb');
@@ -530,7 +556,7 @@ class webdav_client {
     // move/rename a file/collection on webdav server
     function move($src_path,$dst_path, $overwrite) {
 
-        $this->_path = $this->translate_uri($src_path);
+        $this->_path = $this->translate_uri($src_path);
         $this->header_unset();
 
         $this->create_basic_request('MOVE');
@@ -775,7 +801,7 @@ class webdav_client {
             $this->_error_log('Missing a path in method ls');
             return false;
         }
-        $this->_path = $this->translate_uri($path);
+        $this->_path = $this->translate_uri($this->pathprefix . $path);
 
         $this->header_unset();
         $this->create_basic_request('PROPFIND');
@@ -1323,6 +1349,9 @@ EOD;
             if ($signature = $this->digest_signature($method)){
                 $this->header_add($signature);
             }
+        } else if ($this->_auth == 'bearer') {
+            // Send a bearer token if OAuth 2 is active.
+            $this->header_add(sprintf('Authorization: Bearer %s', $this->oauthclient->get_accesstoken()->token));
         }
     }
 
